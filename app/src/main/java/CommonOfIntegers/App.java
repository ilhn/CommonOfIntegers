/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package CommonOfIntegers;

import static spark.Spark.get;
import static spark.Spark.port;
import static spark.Spark.post;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import spark.ModelAndView;
import spark.template.mustache.MustacheTemplateEngine;

public class App{
    public String getGreeting() {
        return "Hello World!";
    }

    public static int getCommon(ArrayList<Integer> inputs, int number1, int number2, int number3) {
        int common;
        int value = number1*number2*number3;

        if(inputs == null) return -1;
        if(inputs.size() == 0) return -1;

        for(int i=0; i<inputs.size(); i++){
            common = inputs.get(i);
            if(inputs.get(i) % value == 0)
                return common;
        }
        return -1;
    }
    public static void main(String[] args) {
        port(getHerokuAssignedPort());

        get("/", (req, res) -> "Hello, World");

        post("/compute", (req, res) -> {
          //System.out.println(req.queryParams("input1"));
          //System.out.println(req.queryParams("input2"));

          String input1 = req.queryParams("input1");
          java.util.Scanner sc1 = new java.util.Scanner(input1);
          sc1.useDelimiter("[;\r\n]+");
          java.util.ArrayList<Integer> inputList = new java.util.ArrayList<>();
          while (sc1.hasNext())
          {
            int value = Integer.parseInt(sc1.next().replaceAll("\\s",""));
            inputList.add(value);
          }
          sc1.close();
          System.out.println(inputList);


          String input2 = req.queryParams("input2");
          //.replaceAll("\\s","");
         // int input2AsInt = Integer.parseInt(input2);
         java.util.Scanner sc2 = new java.util.Scanner(input2);
         sc2.useDelimiter("[;\r\n]+");
         java.util.ArrayList<Integer> inputList2 = new java.util.ArrayList<>();
         int numberCount=0;

         while(numberCount<3){
            int numberTemp = Integer.parseInt(sc2.next().replaceAll("\\s",""));
            inputList2.add(numberTemp);
            numberCount++;
         }

          int result = App.getCommon(inputList, inputList2.get(0),inputList2.get(1),inputList2.get(2));

          Map<String, Integer> map = new HashMap<String, Integer>();
          map.put("result", result);
          return new ModelAndView(map, "compute.mustache");
        }, new MustacheTemplateEngine());


        get("/compute",
            (rq, rs) -> {
              Map<String, String> map = new HashMap<String, String>();
              map.put("result", "not computed yet!");
              return new ModelAndView(map, "compute.mustache");
            },
            new MustacheTemplateEngine());
    }

    static int getHerokuAssignedPort() {
        ProcessBuilder processBuilder = new ProcessBuilder();
        if (processBuilder.environment().get("PORT") != null) {
            return Integer.parseInt(processBuilder.environment().get("PORT"));
        }
        return 4567; //return default port if heroku-port isn't set (i.e. on localhost)
    }


}
